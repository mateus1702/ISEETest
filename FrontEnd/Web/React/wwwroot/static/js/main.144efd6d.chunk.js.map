{"version":3,"sources":["Images/currency_converter-512.png","components/CurrencyConverterForm.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","CurrencyConverterForm","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","amountReal","amountForeign","currencies","selectedCurrency","restServiceOffile","handleInputChange","bind","assertThisInitialized","handleCurencyChange","convertCurrencyFromReal","convertCurrencyFromForeign","_this2","axios","get","then","res","data","forEach","item","push","label","concat","code","name","value","setState","catch","response","event","target","type","checked","replace","defineProperty","_this3","params","status","result","_this4","mainApp","react_default","a","createElement","Form","Group","className","Label","react_select_esm","options","onChange","Fragment","Control","placeholder","Button","variant","onClick","Alert","React","Component","App","src","logo","alt","components_CurrencyConverterForm","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.144efd6d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/currency_converter-512.537326f4.png\";","import React from \"react\";\r\nimport Select from \"react-select\";\r\nimport axios from \"axios\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport { Form, Button, Alert } from \"react-bootstrap\";\r\n\r\nclass CurrencyConverterForm extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      amountReal: \"\",\r\n      amountForeign: \"\",\r\n      currencies: [],\r\n      selectedCurrency: null,\r\n      restServiceOffile: false\r\n    };\r\n\r\n    this.handleInputChange = this.handleInputChange.bind(this);\r\n    this.handleCurencyChange = this.handleCurencyChange.bind(this);\r\n    this.convertCurrencyFromReal = this.convertCurrencyFromReal.bind(this);\r\n    this.convertCurrencyFromForeign = this.convertCurrencyFromForeign.bind(\r\n      this\r\n    );\r\n  }\r\n\r\n  componentDidMount() {\r\n    axios\r\n      .get(`http://localhost:5000/api/currency`)\r\n      .then(res => {\r\n        let currencies = [];\r\n        res.data.currencies.forEach(item => {\r\n          currencies.push({\r\n            label: `${item.code} - ${item.name}`,\r\n            value: item.code,\r\n            code: item.code\r\n          });\r\n        });\r\n        this.setState({ currencies });\r\n      })\r\n      .catch(res => {\r\n        if (!res.response)\r\n          this.setState({\r\n            restServiceOffile: true\r\n          });\r\n      });\r\n  }\r\n\r\n  handleInputChange(event) {\r\n    const target = event.target;\r\n    let value = target.type === \"checkbox\" ? target.checked : target.value;\r\n    const name = target.name;\r\n\r\n    if (name === \"amountReal\" || name === \"amountForeign\")\r\n      value = value.replace(\",\", \".\");\r\n\r\n    this.setState({\r\n      [name]: value\r\n    });\r\n  }\r\n\r\n  handleCurencyChange(selectedCurrency) {\r\n    this.setState({\r\n      selectedCurrency: selectedCurrency\r\n    });\r\n  }\r\n\r\n  convertCurrencyFromReal() {\r\n    if (this.state.selectedCurrency && this.state.amountReal) {\r\n      let params = `?from=BRL&to=${this.state.selectedCurrency.value}&amount=${\r\n        this.state.amountReal\r\n      }`;\r\n\r\n      axios\r\n        .get(`http://localhost:5000/api/currency/convert${params}`)\r\n        .then(res => {\r\n          if (res.status === 200)\r\n            this.setState({\r\n              amountForeign: res.data.result\r\n            });\r\n          else\r\n            this.setState({\r\n              amountForeign: \"\"\r\n            });\r\n        });\r\n    }\r\n  }\r\n\r\n  convertCurrencyFromForeign() {\r\n    if (this.state.selectedCurrency && this.state.amountForeign) {\r\n      let params = `?from=${this.state.selectedCurrency.value}&to=BRL&amount=${\r\n        this.state.amountForeign\r\n      }`;\r\n\r\n      axios\r\n        .get(`http://localhost:5000/api/currency/convert${params}`)\r\n        .then(res => {\r\n          if (res.status === 200)\r\n            this.setState({\r\n              amountReal: res.data.result\r\n            });\r\n          else\r\n            this.setState({\r\n              amountReal: \"\"\r\n            });\r\n        });\r\n    }\r\n  }\r\n\r\n  render() {\r\n    let mainApp = (\r\n      <Form>\r\n        <Form.Group className=\"currency-container\">\r\n          <Form.Label>Target currency</Form.Label>\r\n          <Select\r\n            className=\"currency\"\r\n            options={this.state.currencies}\r\n            onChange={this.handleCurencyChange}\r\n          />\r\n        </Form.Group>\r\n        {this.state.selectedCurrency && (\r\n          <React.Fragment>\r\n            <Form.Group>\r\n              <Form.Label>BRL Amount</Form.Label>\r\n              <Form.Control\r\n                name=\"amountReal\"\r\n                type=\"text\"\r\n                placeholder=\"\"\r\n                value={this.state.amountReal}\r\n                onChange={this.handleInputChange}\r\n              />\r\n            </Form.Group>\r\n            <Button variant=\"primary\" onClick={this.convertCurrencyFromReal}>\r\n              Convert from BRL to {this.state.selectedCurrency.code}\r\n            </Button>\r\n            <br />\r\n            <br />\r\n            <Form.Group>\r\n              <Form.Label>{this.state.selectedCurrency.code} Amount</Form.Label>\r\n              <Form.Control\r\n                name=\"amountForeign\"\r\n                type=\"text\"\r\n                placeholder=\"\"\r\n                value={this.state.amountForeign}\r\n                onChange={this.handleInputChange}\r\n              />\r\n            </Form.Group>\r\n            <Button variant=\"primary\" onClick={this.convertCurrencyFromForeign}>\r\n              Convert from {this.state.selectedCurrency.code} to BRL\r\n            </Button>\r\n          </React.Fragment>\r\n        )}\r\n      </Form>\r\n    );\r\n\r\n    return (\r\n      <React.Fragment>\r\n          <br />\r\n        {this.state.restServiceOffile ? (\r\n           \r\n          <Alert variant='danger'>\r\n            Rest service offile...\r\n          </Alert>\r\n        ) : (\r\n          mainApp\r\n        )}\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default CurrencyConverterForm;\r\n","import React, { Component } from 'react';\nimport logo from './Images/currency_converter-512.png'\nimport './App.css';\nimport CurrencyConverterForm from './components/CurrencyConverterForm'\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <CurrencyConverterForm/>\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}